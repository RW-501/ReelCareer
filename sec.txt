

function sanitizeInput(input, maxLength = 500) {
  // Step 1: Trim input to remove leading/trailing spaces
  let sanitized = input.trim();

  // Step 2: If the input is empty or null, return an empty string
  if (!sanitized) {
      return '';
  }

  // Step 3: Enforce a maximum length for the input (default to 500 characters)
  if (sanitized.length > maxLength) {
      sanitized = sanitized.substring(0, maxLength);
  }

  // Step 4: Remove or escape HTML tags to prevent XSS attacks
  sanitized = sanitized.replace(/<[^>]*>/g, '');

  // Step 5: Escape dangerous characters by replacing them with HTML entities
  const escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;',
      '`': '&#96;'
  };
  sanitized = sanitized.replace(/[&<>"'/`]/g, (char) => escapeMap[char]);

  // Step 6: Prevent potentially dangerous character patterns (SQL injection attempts)
  // Detect common SQL injection patterns and block them
  const sqlPatterns = [/--/, /;/, /'/, /"/, /\/\*/, /\*\/]/, /\bOR\b/, /\bAND\b/i];
  sqlPatterns.forEach(pattern => {
      if (pattern.test(sanitized)) {
          console.log("SQL injection attempt detected!");
          sanitized = sanitized.replace(pattern, '');
      }
  });

  // Step 7: Remove JavaScript code snippets or expressions to prevent XSS injection
  const jsPatterns = [
      /javascript:/gi,    // Block javascript protocol
      /\b(on\w+)=/gi,     // Block event handler attributes like "onclick="
      /<script.*?>.*?<\/script>/gi // Remove script tags entirely
  ];
  jsPatterns.forEach(pattern => {
      sanitized = sanitized.replace(pattern, '');
  });

  // Step 8: Remove possible URL-encoded attempts to sneak in dangerous characters
  const decodeInput = decodeURIComponent(sanitized);
  if (decodeInput !== sanitized) {
      sanitized = sanitizeInput(decodeInput, maxLength); // Recursively sanitize decoded input
  }

  // Step 9: Check for illegal input patterns (like unicode or encoded injections)
  // Remove invisible or non-ASCII characters, which could be malicious
  sanitized = sanitized.replace(/[^\x20-\x7E]/g, '');

  // Step 10: Whitelist of allowed characters (alphanumeric, space, punctuation, etc.)
  // Adjust allowed characters based on context or expected input
  const whitelistPattern = /^[a-zA-Z0-9 .,!?-]+$/;
  if (!whitelistPattern.test(sanitized)) {
      console.log("Disallowed characters detected! Removing them.");
      sanitized = sanitized.replace(/[^a-zA-Z0-9 .,!?-]/g, '');
  }

  // Step 11: Advanced injection pattern detection (e.g., hex encoding, octal, etc.)
  const hexPattern = /\\x[0-9A-Fa-f]{2}/g; // Hexadecimal encoded characters
  const octalPattern = /\\[0-7]{3}/g;      // Octal encoded characters
  sanitized = sanitized.replace(hexPattern, '');
  sanitized = sanitized.replace(octalPattern, '');

  // Step 12: Avoid overly complex nesting or encoding within the input
  // This prevents recursive injection strategies that rely on multiple levels of encoding
  let nestedSanitizationCount = 0;
  while (/<|>/g.test(sanitized) && nestedSanitizationCount < 10) {
      sanitized = sanitized.replace(/<[^>]*>/g, '');
      nestedSanitizationCount++;
  }

  // Step 13: Check for potential script injection attempts using suspicious keywords
  const forbiddenKeywords = ['script', 'img', 'iframe', 'object', 'embed', 'link', 'style', 'src'];
  forbiddenKeywords.forEach(keyword => {
      if (sanitized.toLowerCase().includes(keyword)) {
          sanitized = sanitized.replace(new RegExp(keyword, 'gi'), '');
      }
  });

  // Step 14: Further reduce attack surface by restricting overly complex sequences
  // Remove consecutive special characters (e.g., ---- or ////)
  sanitized = sanitized.replace(/[-]{2,}/g, '-');
  sanitized = sanitized.replace(/[\/]{2,}/g, '/');
  sanitized = sanitized.replace(/[\!]{2,}/g, '!');

  // Step 15: Remove malicious URL protocols (such as data: and javascript:)
  sanitized = sanitized.replace(/data:/gi, '');
  sanitized = sanitized.replace(/vbscript:/gi, '');

  // Step 16: Replace all newline characters and non-printable characters
  sanitized = sanitized.replace(/[\r\n]+/g, ' ');

  // Step 17: Optionally sanitize email addresses or URLs separately (custom cases)
  const isEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(sanitized);
  const isUrl = /^https?:\/\/[^\s/$.?#].[^\s]*$/i.test(sanitized);
  if (isEmail || isUrl) {
      sanitized = sanitized.replace(/[<>]/g, ''); // Minimal cleanup for email/URLs
  }

  // Step 18: Additional filtering based on the context
  // You could add context-specific filters here, e.g., phone numbers, addresses, etc.

  // Step 19: Final fallback against potential malicious input encoding
  // Remove any remaining instances of character escaping or special sequences
  sanitized = sanitized.replace(/\\u[0-9A-Fa-f]{4}/g, ''); // Unicode escape sequences

  // Step 20: Return fully sanitized input (final defense line)
  return sanitized;
}
